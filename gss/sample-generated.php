<?php

namespace sds\sdk\test;

/**
 * This file is generated by GsPHP
 *
 * @generator greevex\gss\translator\gsphp
 * @date 2014-10-10 16:10:12
 */
class start
{
    
    /**
     * @var Queue $queue
     */
    protected $queue;
    /**
     * @var Integer $count
     */
    protected $count;


    public function _initialize()
    {
        
        $this->queue = new Queue();
        $this->count = new Integer();

    }

    
    /**
     * This function is generated by
     *  greevex\gss\translator\gsphp
     *
     *
     *
     **/
    public function test()
    {
        $queue =& $this->queue;
        $count =& $this->count;
        
        
        //@generator variableActionTranslator
        $count = $count + 1;

        
    }

    /**
     * This function is generated by
     *  greevex\gss\translator\gsphp
     *
     *
     *
     **/
    public function start()
    {
        $queue =& $this->queue;
        $count =& $this->count;
        
        
        //@generator variableCallTranslator
        $queue.append("http://yandex.ru");

        //@generator foreachTranslator
        while($item = array_shift($queue)) {
            $this->process($item);
        }

        
    }

    /**
     * This function is generated by
     *  greevex\gss\translator\gsphp
     *
     * @var mixed $url
     *
     *
     * @return mixed $result
     **/
    public function process($url)
    {
        $queue =& $this->queue;
        $count =& $this->count;
        
        
        //@generator actionTranslator
        $content = new Load($url);
        $content->setParam('proxy', "random");
        $content->setParam('userAgent', "auto");
        $content->setParam('attempts', 5);
        $content->execute();

        //@generator actionTranslator
        $result = Parse::factory('template', $content);
        $result->setParam('match', auto);
        $result->setParam('on_fail', skip);
        $result->execute();

        //@generator ifTranslator
        if($result->data->status == false) {
            $SDS->output->print("Status FAIL");

            return;
        }

        //@generator foreachTranslator
        while($item = array_shift($result->data->items)) {
            $SDS->api->document->post($item);
        }

        //@generator foreachTranslator
        while($link = array_shift($result->data->links)) {
            $queue->append($link);
        }

        
        return $result;
    }


}